[default]
home =              /path/to/home/

[corpusPrep]
corpus.home =       ${default:home}/corpus
source.path =       ${default:home}/path/to/source
result.path =       ${default:home}/path/to/result
pos.path =          ${default:home}/path/to/positives/folder
neg.path =          ${default:home}/path/to/negatives/folder
pos.ids =           ${default:home}/Databases/posClusterIds
pos.filters =       ${default:home}/Databases/testOrgClusterIds
# task ->           'shuffle', 'selectvalid', 'split', 'similarity', 'domain', 'goterms', 'pfamtsv'
task =              shuffle
slim.ids =          True
# source type ->    'gbk', 'fasta'
source.ext =        gbk
# sequence type ->  nucleotide or aminoacid
source.type =       'aminoacid'
# approximate number of characters per cluster (bps or aminoacids)
cluster.length =    7000
valid.perc =         20
pos.perc =          0.5
# overlap of cluster windows, percentage from 0 to 100
window.overlap =    50

[parsers]
source.path =       /path/to/Databses/or/parse/files

[dataPipeline]
# source type ->    'domain' or 'blast'
task =              blast
result.path =       ${corpusPrep:corpus.home}/path/to/output/
source.path =       ${corpusPrep:corpus.home}/path/to/source/
# source type ->    'fasta-protein' or 'fasta-nucleotide' or 'genbank'
source.type =       fasta-protein

[blaster]
blastdb.path =      ${default:home}/path/to/Databases/blastdb/
blastdb.name =      name_of_blastdb

[domainFinder]
pfamScan.path =     ${default:home}/PfamScan
pfamScript =        ${pfamScan.path}/pfam_scan.pl
pfamDBs.path =      ${pfamScan.path}/PfamDB
hmmerBin.path =     ${pfamScan.path}/hmmer/bin/

[prediction]
# task type: 'train', 'validation', 'test'
task =              train
source.path =       ${corpusPrep:corpus.home}/path/to/corpus
# source sequence type ->  nucleotide, aminoacid, domains
source.type =       aminoacid
use.crossvalid =    False
# percentage of positives in the train (path) dataset
pos.perc =          50
dict.path =         ${default:home}/Databases/path/to/dict
# feature type: 'domains', 'kmers', 'dictionary'
feat.type =         go-kmers-domains
feat.minOcc =       3
feat.size =         6
feat.reduc =        none
###### parametes: ML ######
# ML classifier ->     'mlp', 'nusvc', 'svc', 'linearsvc', 'randomforest', 'logit'
classifier =        randomforest
###### parametes: RL ######
episodes =          500
alpha =             0.01
gamma =             0.01
epsilon =           0.01
penalty.threshold = 0
keepskip.threshold = 0.5
neighbor.weight =   False
dry.islands =       False
average.action =    False

[eval]
# task type: 'evaluate', 'summarize'
task =              evaluate
goldID.path =       ${default:home}/Database/goldclusters
result.path =       ${corpusPrep:corpus.home}/path/to/corpus/metrics/
similarity.path =   ${default:home}/path/to/similarity.blast
# min prediction confidence value to be rounded to 1
threshold =         0.5
# successive positive clusters: '0' > value > '3'
successive =        0
# merge positive clusters: 'True' or 'False'
merge = False
# use majority from overlap
majority =          False
gene.length =       ${default:home}/Databases/path/to/geneLengthMap
gene.map =          ${default:home}/Databases/path/to/geneMap
weights =           ${default:home}/Databases/path/to/componentAnnotation
# use similarity scores: True or False
similarity =        False
q.filter =          False
rule.filter =       False
rule.list =         ${default:home}/path/to/domainsToFilter
split =             False
split.threshold =   3
